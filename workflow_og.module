<?php
// $Id$

/**
 * @file
 * The main module file for workflow_og module.
 */
 
 
 /**
 * Implementation of hook_perm().
 *
 * Since the access to our new custom pages will be granted based on
 * special permissions, we need to define what those permissions are here.
 * This ensures that they are available to enable on the user role
 * administration pages.
 */
function workflow_og_perm() {
  return array(
    'promote workflow_og'
  );
}

/**
 * Implementation of hook_menu().
 *
 * hook_menu() must be implemented to emit items to place in the main menu.
 * This is a required step for modules wishing to display their own pages,
 * because the process of creating the links also tells Drupal what
 * callback function to use for a given URL. The menu items returned
 * here provide this information to the menu system.
 *
 * With the below menu definitions, URLs will be interpreted as follows:
 *
 * If the user accesses http://example.com/?q=example/foo, then the menu system
 * will first look for a menu item with that path. In this case it will
 * find a match, and execute workflow_og_foo().
 *
 * If the user accesses http://example.com/?q=example, no match will be found,
 * and a 404 page will be displayed. They same will happen for the urls:
 *  - http://example.com/?q=example/baz
 *  - http://example.com/?q=example/baz/1
 *
 * If the user accesses http://example.com/?q=example/baz, the menu system
 * will not find a match, as the menu entries are registered with the form:
 * a/b/c/d. All the elements included in the menu entry definition should be
 * present for the menu system to match the request.
 *
 * If the user accesses http://example.com/?q=example/baz/1/2, the menu system
 * will first look for example/baz/1/2. Not finding a match, it will look for
 * example/baz/1/%. Again not finding a match, it will look for example/baz/%/2. Yet
 * again not finding a match, it will look for example/baz/%/%. This time it finds
 * a match, and so will execute workflow_og_baz(1, 2). Note the parameters
 * being passed; this is a very useful technique.
 *
 * The @link menu_example.module Menu Example @endlink provides extensive
 * examples for hook_menu().
 */
function workflow_og_menu() {
  // This is the minimum information you can provide for a menu item. This menu
  // item will be created in the default menu: Navigation.
  $items['node/%node/promote'] = array(
    'title' => 'Promote',
    'description' => 'Manage Approval',
//    'page callback' => 'promote_workflow_og',
    'page callback' => 'drupal_get_form',
	'page arguments' => array('promote_workflow_og'),
//    'file path' => 'workflow_og.pages.inc',
    'access arguments' => array('promote_workflow_og'),
    'type' => MENU_LOCAL_TASK,
  );


  return $items;
}


/**
 * A simple page callback.
 *
 * Page callbacks are required to return the entire page. The content
 * is then usually output via a call to theme('page'), where the theme system
 * will then surround the content in the appropriate blocks, navigation, and
 * styling.
 *
 * If you do not want to use the theme system (for example for outputting an
 * image or XML), you should print the content yourself and not return anything.
 */
function promote_workflow_og() {
  
  $form['description'] = array(
    '#type' => 'item',
    '#title' => t('A form with nothing but a textfield'),
  );
  // This is the first form element. It's a textfield with a label, "Name"
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
  );
  return $form;

}
